<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quicktip on Kerri Shotts</title>
    <link>https://kerrishotts.github.io/tags/quicktip/</link>
    <description>Recent content in Quicktip on Kerri Shotts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2015 Kerri Shotts. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 15 Dec 2015 17:53:21 -0600</lastBuildDate>
    <atom:link href="https://kerrishotts.github.io/tags/quicktip/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Handling large SQL Query results</title>
      <link>https://kerrishotts.github.io/post/quicktip/2015/12/15-sqlite/</link>
      <pubDate>Tue, 15 Dec 2015 17:53:21 -0600</pubDate>
      
      <guid>https://kerrishotts.github.io/post/quicktip/2015/12/15-sqlite/</guid>
      <description>&lt;p&gt;Recently I encountered an odd problem while working on an app for the current book I&amp;rsquo;m writing. The app worked as-is, but I wanted
to improve the startup performance by using a SQLite database rather than using an XHR to load a large JSON file. I added the
&lt;a href=&#34;https://github.com/litehelpers/cordova-sqlite-ext&#34;&gt;cordova-sqlite-ext plugin&lt;/a&gt; because it had built-in support for pre-populated
databases. I also have &lt;a href=&#34;https://github.com/kerrishotts/Mastering-PhoneGap-Code-Package/blob/master/logology-v12/src/www/js/lib/WebSQL.js&#34;&gt;a promise-based wrapper that I like to use&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I should mention that both the JSON and resulting SQLite database are large &amp;ndash; the JSON file is 27MiB and the SQLite database is
45MiB. As such, an unlimited result set from a naive query could return a lot of rows &amp;ndash; nearly 150,000.&lt;/p&gt;

&lt;p&gt;The naive code, by the way, looked something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;db.query({sql&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;select lemma from lemmas order by lemma&amp;quot;&lt;/span&gt;})
  .then((r) &lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;this&lt;/span&gt;.sortedIndex &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; r.rows.map(r) &lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt; r.lemma })
  ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This looks like it should work, and it did work in Safari, in Chrome, and in the iOS simulator. However, this failed miserably on
a physical device (yet another example of why it is always important to test on physical devices).&lt;/p&gt;

&lt;p&gt;Unfortunately, there was no error. There was nothing interesting on the console. The app just didn&amp;rsquo;t work right. I investigated
further, and it turned out that the above promise wasn&amp;rsquo;t resolving correctly. What blew my mind was that even unrelated promises
failed to resolve once this particular piece of code was executed. It took an &lt;code&gt;alert(1);&lt;/code&gt; to get any promises to work again.&lt;/p&gt;

&lt;p&gt;Today I took a closer look and stepped through the native code, and it suddenly occurred to me: the plugin has to transfer a lot of
data over the Cordova bridge. Although querying the SQLite database is a lot faster than iterating over a JSON object, the latter
stays entirely within the JavaScript context. The plugin, on the other hand, was having to transfer data between the native and
hybrid contexts. Furthermore, my wrapper converts the rows in the result set into a normal Array. While this makes for easier
processing later (I can use &lt;code&gt;map&lt;/code&gt; and the like), this also takes time and memory.&lt;/p&gt;

&lt;p&gt;I tried a shorter query that would return one row. &lt;strong&gt;BOOM&lt;/strong&gt;, it worked. It was now obvious that the problem was related to the
amount of data being selected. So I tried some more numbers. I was able to successfully load up to one-hundred thousand records at
once, but the more records I loaded, the more I recognized a problem: the app would become increasingly unresponsive. As far as
I can tell, this is due in part to the data transfer and also due the conversion of the rows into an array by my wrapper, and
obviously the more data one has to transfer and convert, the longer it takes.&lt;/p&gt;

&lt;p&gt;At some point after one-hundred thousand records, the process breaks down completely, and the data is never returned to the promise.
As such, the promise is just sitting there, twiddling its thumbs, waiting for data that will never arrive.&lt;/p&gt;

&lt;p&gt;So how can we fix this? Turns out, rather easily. SQLite understands the &lt;code&gt;LIMIT&lt;/code&gt; keyword, which allows us to break up a query into
smaller segments. Typically this might be used for paging a result set, but it works for our purposes as well. This is what the
final result looks like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;db.query({sql&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;select count(*) as numLemmas from lemmas&amp;quot;&lt;/span&gt;}).then((r) &lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;const&lt;/span&gt; ITEMS_PER &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10000&lt;/span&gt;;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;let&lt;/span&gt; numLemmas &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; r.rows[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;].numLemmas;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;let&lt;/span&gt; p &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; Promise.resolve();
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt; numLemmas; i &lt;span style=&#34;color: #333333&#34;&gt;+=&lt;/span&gt; ITEMS_PER) {
        p &lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt; p.then(() &lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt; db.query({sql&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;select lemma from lemmas order by lemma limit ?, ?&amp;quot;&lt;/span&gt;, binds&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt;[i, ITEMS_PER]}))
             .then((r) &lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;this&lt;/span&gt;.sortedIndex.push(...r.rows.map((r) &lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt; r.lemma)));
    }
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; p;
})...
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is what the above code does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Selects the number of records that the query will return&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Creates a series of promises that process only a portion of the total query, in 10,000 record blocks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The key here is &lt;code&gt;LIMIT ?, ?&lt;/code&gt;. The first parameter is the starting position in the result set, and the second is the number of
records that are returned.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pushes the results into the target array.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, for a query that returns nearly 150,000 records, this has to generate 15 queries. Interestingly enough, however, the
return is nearly instantaneous, and doesn&amp;rsquo;t ever block the app itself, so everything remains responsive, and should the query ever
return even &lt;em&gt;more&lt;/em&gt; rows, the app will still continue to function correctly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is, of course, an upper limit to how much we can store in an array, of course. That said, JavaScript doesn&amp;rsquo;t do terribly
badly here &amp;ndash; A sorted 150,000 array of words doesn&amp;rsquo;t take up much space at all. Right now the app is consuming around 20MiB of
RAM using Xcode&amp;rsquo;s profiler, and that&amp;rsquo;s with a full DOM and a few views on screen. While this might be tight on devices with
a ridiculously low amount of RAM, it&amp;rsquo;s more than workable on any device within the last three or so years.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Cordova/PhoneGap &amp; CSP (QuickTip)</title>
      <link>https://kerrishotts.github.io/post/quicktip/2015/11/25-cordova-csp/</link>
      <pubDate>Wed, 25 Nov 2015 22:29:58 -0600</pubDate>
      
      <guid>https://kerrishotts.github.io/post/quicktip/2015/11/25-cordova-csp/</guid>
      <description>

&lt;p&gt;I just wanted to share a few tips regarding the Content Security Policy meta tag that we need to use in PhoneGap/Cordova apps. I&amp;rsquo;m not going to cover &lt;em&gt;all&lt;/em&gt; the gory details &amp;mdash; for that, there are plenty of great sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&#34;&gt;Content Security Policy (HTML5Rocks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy&#34;&gt;Using Content Security Policy (MDN)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m just going to focus on a few specific use cases when it comes to the intersection of CSP and Cordova/PhoneGap, but thereâs a couple things we need to mention first.&lt;/p&gt;

&lt;h2 id=&#34;the-csp-meta-tag:e5b6aa8725667982def880fbba897e59&#34;&gt;The CSP Meta Tag&lt;/h2&gt;

&lt;p&gt;CSP directives are specified by a &lt;code&gt;meta&lt;/code&gt; tag, like so:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007700&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #0000CC&#34;&gt;http-equiv=&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Content-Security-Policy&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #0000CC&#34;&gt;contents=&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #007700&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;csp-directives:e5b6aa8725667982def880fbba897e59&#34;&gt;CSP Directives&lt;/h2&gt;

&lt;p&gt;CSP controls what sources are permitted and what sources aren&amp;rsquo;t. Because there are many different types of assets our page might need, CSP also allows us to be very granular with respect to what types of assets can be loaded from which sources. There&amp;rsquo;s several directives available, like so:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;directive&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;img-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Image sources (like PNG, JPG, SVG, etc.)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;media-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Video/audio sources&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;script-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Script sources&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;style-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Stylesheet sources&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;font-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Webfont sources&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fallback for most directives&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This isn&amp;rsquo;t the entire list of available directives, so youâll want to check out the links at the head of this article for all the possibilities, but this should give you a pretty good idea of the granularity of CSP.&lt;/p&gt;

&lt;p&gt;Furthermore, it&amp;rsquo;s important to note that there is a hierarchy of sorts â if you don&amp;rsquo;t specify &lt;code&gt;img-src&lt;/code&gt;, but do specify &lt;code&gt;default-src&lt;/code&gt;, then &lt;code&gt;default-src&lt;/code&gt; is used instead. If you specify both, however, the values won&amp;rsquo;t inherit from &lt;code&gt;default-src&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;csp-sources:e5b6aa8725667982def880fbba897e59&#34;&gt;CSP Sources&lt;/h2&gt;

&lt;p&gt;A source is either a URL or a special keyword. A URL can look like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://www.example.com&lt;/code&gt; &amp;ndash; allow resources from this domain, including any pages on it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://*.example.com&lt;/code&gt; &amp;ndash; allow resources from this domain, including any subdomains.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*://*.example.com&lt;/code&gt; &amp;ndash; allow resources from this domain, any subdomains, &lt;em&gt;and&lt;/em&gt; any URL scheme&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*://*.example.com:*&lt;/code&gt; &amp;ndash; allow resources from this domain, any subdomains, any URL scheme, &lt;strong&gt;and&lt;/strong&gt; any port.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Although it might appear that you can use wildcards anywhere, you can&amp;rsquo;t. You can only use a wildcard for the URL scheme, the left part of the domain, and the port.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are four keywords that you can also use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;none&#39;&lt;/code&gt; &amp;ndash; indicates that no source is permitted. This disables access for the specified directive.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;self&#39;&lt;/code&gt; &amp;ndash; indicates that local resources are permitted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;unsafe-inline&#39;&lt;/code&gt; &amp;ndash; permits inline scripts/styles&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;unsave-eval&#39;&lt;/code&gt; &amp;ndash; permits &lt;code&gt;eval()&lt;/code&gt; and its ilk.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;csp-syntax:e5b6aa8725667982def880fbba897e59&#34;&gt;CSP Syntax&lt;/h2&gt;

&lt;p&gt;Each directive can have any number of sources. Each one is separated by a space. The entire set of directives are separated by semicolons. This makes things a little difficult to read, but that&amp;rsquo;s the way it&amp;rsquo;s built. For example, here&amp;rsquo;s a sample CSP tag:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007700&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #0000CC&#34;&gt;http-equiv=&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Content-Security-Policy&amp;quot;&lt;/span&gt; 
 &lt;span style=&#34;color: #0000CC&#34;&gt;content=&lt;/span&gt;&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;default-src &amp;#39;self&amp;#39; https://*.example.com;&lt;/span&gt;
&lt;span style=&#34;background-color: #fff0f0&#34;&gt;              img-src &amp;#39;self&amp;#39; https://images.example.com data:;&lt;/span&gt;
&lt;span style=&#34;background-color: #fff0f0&#34;&gt;           script-src &amp;#39;self&amp;#39; https://scripts.example.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #007700&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t a terribly useful CSP, but it does illustrate the syntax.&lt;/p&gt;

&lt;h2 id=&#34;common-cordova-uses:e5b6aa8725667982def880fbba897e59&#34;&gt;Common Cordova Uses&lt;/h2&gt;

&lt;p&gt;With all that out of the way, here&amp;rsquo;s some common tasks you might need to perform  in a Cordova app â along with the directives you need to specify to permit them:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;task&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;directive&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iOS Support&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;gap://*&lt;/code&gt; (1)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Allow web socket communication&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;ws://*&lt;/code&gt; (2)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Execute / load local resources&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;self&#39;&lt;/code&gt; (3)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Load &lt;code&gt;data:&lt;/code&gt; images&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;img-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;data:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Permit &lt;code&gt;eval()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;script-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;unsafe-eval&#39;&lt;/code&gt;   (4)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Permit inline scripting&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;script-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;unsafe-inline&#39;&lt;/code&gt; (5)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Permit inline styles&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;style-src&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;unsafe-inline&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This is critically important for your Cordova/PhoneGap apps running on iOS. Without it, plugins and Cordova events won&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;If you use web sockets for communication, youâll need to allow this URL scheme. Our example allows communication with any host on any port, but ideally you&amp;rsquo;ll be more specific.&lt;/li&gt;
&lt;li&gt;You should always have &lt;code&gt;&#39;self&#39;&lt;/code&gt; in any directive so that you can load local resources. If you override any other directive, youâll need to specify &lt;code&gt;&#39;self&#39;&lt;/code&gt; there too.&lt;/li&gt;
&lt;li&gt;Only allow &lt;code&gt;eval()&lt;/code&gt; if you absolutely must do so. Some plugins, libraries and frameworks will require it, but if you can avoid it, this should be avoided, as it can be a huge security hole.&lt;/li&gt;
&lt;li&gt;Only allow inline scripting if you absolutely must. Again, some frameworks and such might require it, but it&amp;rsquo;s a huge security risk if youâre injecting dynamic HTML using untrusted data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-about-browsersync:e5b6aa8725667982def880fbba897e59&#34;&gt;What about BrowserSync?&lt;/h2&gt;

&lt;p&gt;I really, really, really like to use BrowserSync when rapidly iterating, especially because it lets me have the same content loaded across multiple devices, including the desktop. When I make changes, the content can automatically be updated.&lt;/p&gt;

&lt;p&gt;In order to use BrowserSync, however, you need to enable certain CSP rules. These should only be enabled during development, unless youâre using another framework or plugin that requires them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;ws://*&lt;/code&gt; to the &lt;code&gt;default-src&lt;/code&gt; directive â BrowserSync communicates over web sockets.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;&#39;unsafe-inline&#39;&lt;/code&gt; to the &lt;code&gt;script-src&lt;/code&gt; directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also use &lt;code&gt;phonegap serve&lt;/code&gt; and the PhoneGap Developer app for a similar experience. However, I&amp;rsquo;ve only had limited luck in getting this to work well within my typical build setup (which has all sorts of stuff going on!), while BrowserSync works a peach.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>PhoneGap, SELECTs, and 3D transforms, oh my!</title>
      <link>https://kerrishotts.github.io/post/quicktip/2012/11/12/</link>
      <pubDate>Mon, 12 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://kerrishotts.github.io/post/quicktip/2012/11/12/</guid>
      <description>&lt;p&gt;In an app for a client, I was having an odd problem: the SELECT box wasn&amp;rsquo;t tappable on Android 2.x. It worked great on iOS. It worked great on Android 4.x. But on 2.x, it just wouldn&amp;rsquo;t respond to input.&lt;/p&gt;

&lt;p&gt;After a bit of frustrated debugging, I found this page after a Google search: &lt;a href=&#34;http://stackoverflow.com/questions/4523309/select-box-not-displaying-on-android-in-phonegap&#34;&gt;http://stackoverflow.com/questions/4523309/select-box-not-displaying-on-android-in-phonegap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Guess what &amp;ndash; problem solved. I removed the code I was using that added a -webkit-transform:translate3d(0,0,0) on the parent element, and the SELECT box worked beautifully again.&lt;/p&gt;

&lt;p&gt;Thought you might want to know &amp;ndash; in case you ever had the same problem!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>